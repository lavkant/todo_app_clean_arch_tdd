// Mocks generated by Mockito 5.4.4 from annotations
// in todo_tdd_clean/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i18;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:todo_tdd_clean/core/failures/failures.dart' as _i7;
import 'package:todo_tdd_clean/features/todo/data/datasources/todo_datasource.dart'
    as _i9;
import 'package:todo_tdd_clean/features/todo/data/models/todo_model.dart'
    as _i3;
import 'package:todo_tdd_clean/features/todo/domain/entities/todo_entity.dart'
    as _i8;
import 'package:todo_tdd_clean/features/todo/domain/repositories/todo_repository.dart'
    as _i4;
import 'package:todo_tdd_clean/features/todo/domain/usecases/add_todo_usecase.dart'
    as _i10;
import 'package:todo_tdd_clean/features/todo/domain/usecases/delete_all_todo_usecase.dart'
    as _i15;
import 'package:todo_tdd_clean/features/todo/domain/usecases/delete_todo_usecase.dart'
    as _i14;
import 'package:todo_tdd_clean/features/todo/domain/usecases/get_all_todo_usecase.dart'
    as _i12;
import 'package:todo_tdd_clean/features/todo/domain/usecases/get_todo_usecase.dart'
    as _i11;
import 'package:todo_tdd_clean/features/todo/domain/usecases/update_todo_usecase.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoModel_1 extends _i1.SmartFake implements _i3.TodoModel {
  _FakeTodoModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoRepository_2 extends _i1.SmartFake
    implements _i4.TodoRepository {
  _FakeTodoRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i4.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>> addTodo(
          _i8.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.TodoEntity>>(
          this,
          Invocation.method(
            #addTodo,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>> deleteTodo(
          _i8.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todo],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.TodoEntity>(
          this,
          Invocation.method(
            #deleteTodo,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>> updateTodo(
          _i8.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.TodoEntity>(
          this,
          Invocation.method(
            #updateTodo,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>> getTodo(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTodo,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.TodoEntity>(
          this,
          Invocation.method(
            #getTodo,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>> getAllTodo() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTodo,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.TodoEntity>>(
          this,
          Invocation.method(
            #getAllTodo,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> deleteAllTodo() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllTodo,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #deleteAllTodo,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);
}

/// A class which mocks [TodoDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoDataSource extends _i1.Mock implements _i9.TodoDataSource {
  MockTodoDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i3.TodoModel>> addTodo(_i3.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValue: _i6.Future<List<_i3.TodoModel>>.value(<_i3.TodoModel>[]),
      ) as _i6.Future<List<_i3.TodoModel>>);

  @override
  _i6.Future<_i3.TodoModel> deleteTodo(_i3.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todo],
        ),
        returnValue: _i6.Future<_i3.TodoModel>.value(_FakeTodoModel_1(
          this,
          Invocation.method(
            #deleteTodo,
            [todo],
          ),
        )),
      ) as _i6.Future<_i3.TodoModel>);

  @override
  _i6.Future<_i3.TodoModel> updateTodo(_i3.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i6.Future<_i3.TodoModel>.value(_FakeTodoModel_1(
          this,
          Invocation.method(
            #updateTodo,
            [todo],
          ),
        )),
      ) as _i6.Future<_i3.TodoModel>);

  @override
  _i6.Future<_i3.TodoModel> getTodo(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTodo,
          [id],
        ),
        returnValue: _i6.Future<_i3.TodoModel>.value(_FakeTodoModel_1(
          this,
          Invocation.method(
            #getTodo,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.TodoModel>);

  @override
  _i6.Future<List<_i3.TodoModel>> getAllTodo() => (super.noSuchMethod(
        Invocation.method(
          #getAllTodo,
          [],
        ),
        returnValue: _i6.Future<List<_i3.TodoModel>>.value(<_i3.TodoModel>[]),
      ) as _i6.Future<List<_i3.TodoModel>>);

  @override
  _i6.Future<void> deleteAllTodo() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllTodo,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AddTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTodoUseCase extends _i1.Mock implements _i10.AddTodoUseCase {
  MockAddTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>> execute(
          _i8.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [todo],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.TodoEntity>>(
          this,
          Invocation.method(
            #execute,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>);
}

/// A class which mocks [GetTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodoUseCase extends _i1.Mock implements _i11.GetTodoUseCase {
  MockGetTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>> execute(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.TodoEntity>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>);
}

/// A class which mocks [GetAllTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTodoUseCase extends _i1.Mock implements _i12.GetAllTodoUseCase {
  MockGetAllTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.TodoEntity>>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.TodoEntity>>>);
}

/// A class which mocks [UpdateTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTodoUseCase extends _i1.Mock implements _i13.UpdateTodoUseCase {
  MockUpdateTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>> execute(
          _i8.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [todo],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.TodoEntity>(
          this,
          Invocation.method(
            #execute,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>);
}

/// A class which mocks [DeleteTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTodoUseCase extends _i1.Mock implements _i14.DeleteTodoUseCase {
  MockDeleteTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>> execute(
          _i8.TodoEntity? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [todo],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>.value(
            _FakeEither_0<_i7.Failure, _i8.TodoEntity>(
          this,
          Invocation.method(
            #execute,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, _i8.TodoEntity>>);
}

/// A class which mocks [DeleteAllTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAllTodoUseCase extends _i1.Mock
    implements _i15.DeleteAllTodoUseCase {
  MockDeleteAllTodoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TodoRepository get todoRepository => (super.noSuchMethod(
        Invocation.getter(#todoRepository),
        returnValue: _FakeTodoRepository_2(
          this,
          Invocation.getter(#todoRepository),
        ),
      ) as _i4.TodoRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, void>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.Failure, void>>.value(
            _FakeEither_0<_i7.Failure, void>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, void>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i18.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i6.Future<_i18.Uint8List>);

  @override
  _i6.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
